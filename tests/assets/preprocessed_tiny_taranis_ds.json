{"id":{"0":"b57978a3-5009-4c6d-82cb-f92693ad39e7","1":"ba2a70ee-4005-4f34-ae55-b4850a239683","2":"6c57d0af-0abb-45af-817b-c0f42adea922","3":"6c57d0af-0abb-45af-817b-c0f42adea922","4":"aa989fe5-645a-4118-b47c-a7116446835d","5":"c62f70c9-61b9-4243-bd4e-7e15b420cb5d"},"news_item_id":{"0":"4c1ef053-20e5-4b6c-9f29-aa42b11f585b","1":"0cfb9466-67bd-4cf8-9458-cd084cdc8d72","2":"cab0f044-09ea-447f-81e0-31fdd25eae7f","3":"537e90ce-4883-4b18-b0fd-3cd3063c132d","4":"0febc8ae-9f7a-40fc-bf91-66ae9b658a95","5":"242144c8-07e5-4432-bec3-6a01ed18c65e"},"title":{"0":"Double Agents and User Agents: Navigating the Realm of Malicious Python Packages","1":"On Cybersecurity Alert Levels","2":"Hobby hunter notes: PyPI under attack","3":"Test News Item","4":"The European Cyber Shield","5":"A classification of CTI Data feeds"},"content":{"0":"Have you ever encountered the term 'double agent'? Recently, we've had the opportunity to revisit this concept in Austria. Setting aside real-world affairs for prosecutors and journalists, let\u2019s explore what this term means in the digital world as I continue my journey tracking malicious Python packages.\nOpen Source is a key!\nSuppose you were a script kiddie threat actor researcher looking to snag some cookies analyse new tools used to steal information from victims \u2014 where would you head? You might choose from several options, but let\u2019s assume you love open source and decide to visit GitHub, one of the largest platforms for open source projects. It\u2019s an excellent resource for almost everything IT-related, including educational materials on malware builders.\nI tricked you a bit there \u2014 did you catch it? Not everything on GitHub is open source, even if the source code is visible. Moreover, \u201copen source\u201d doesn't mean the same thing in every context. It\u2019s crucial to always check the licence. Always check the licence.\nFor instance, on GitHub, you can find the Oak Token Grabber V2. It offers a builder to customize a grabber (information stealer malware). Check out these features:\n\nA screenshot of the README from the repository dreamyoak\/Oak-Grabber-V2\nThis repository isn\u2019t new; it existed already in the middle of last year [1]. When I visited, there was a link to a website offering paid versions of educational RAT grabbers and other services. This isn't unusual. Reviewing the repository's history showed no activity for a year between March 2023 and March 2024, then suddenly, an author with a slightly different name (dreamyoak instead of the original dynastyoak) began updating the code. This suggests that the repository had been moved or perhaps taken down in the past year.\nA brief note on analysing the history of git repositories: like anything, you cannot blindly trust the data provided by git. For instance, dates can be easily tampered with by the commit author. However, in this case, all changes were made through the GitHub web interface, which means such commits are automatically signed by GitHub, and we can verify them using their public key [2].\nWhat did the new author do? The most significant change was the introduction of a new dependency that did quite a bit: collecting Wi-Fi passwords, PowerShell history, installed applications, desktop screenshots, and more. Yet, there was one tiny detail.\nThese weren't features of the builder.\nThis data was collected from people trying to build malware, effectively acting as a double agent spying on both sides.\nIn short, a grabber builder was transformed into a grabber itself. The dependency \u2014 a Python package uploaded to PyPI \u2014 was imported by the builder when used, then it automatically downloaded an actual grabber that collected and exfiltrated data. This was, in fact, the grabber advertised on the website \u2014 the Nagogy Grabber \u2014 first observed at least a year ago [3]. It can be easily detected with a YARA rule from Any.run [4].\nWhile the malicious dependency straightforwardly downloaded and ran the actual grabber, a very clever old technique was used to evade static analysers. Python is one of the languages that does not require source code to be written using pure ASCII characters. PEP 3131 introduced support for any characters that can be normalized and defined Python behaviour as follows: \u201cAll identifiers are converted into the normal form NFKC while parsing; comparison of identifiers is based on NFKC.\u201d [5]\nWhat does this mean? Consider the example below. In the first two lines, I used simple 'u' and 'a' letters. But the characters in the third line aren\u2019t them any more\u2014those are \u201cMathematical Sans-Serif Bold Italic Small U\u201d [6] and \u201cMathematical Sans-Serif Bold Small A.\u201d [7] Both are part of the Unicode specification, and as you can see, even though they don\u2019t graphically match the variable identifiers from previous lines, Python was able to process the statement successfully. This was possible thanks to the normalization, which translated the characters to ASCII before evaluation.\n\nAn example of mixing ASCII and Unicode characters in identifiers that could confuse people but not Python\nThis feature isn't often used, but authors of malicious code learned years ago that many static analysers do not follow PEP 3131 and won\u2019t recognize what the code in the picture below, sampled from the malicious package imported by the mentioned grabber builder, really does.\n\nThis is an entirely valid Python code downloading and running a malicious executable\nThe author of the Oak-Grabber-V2 seemed quite determined to maintain the double agent feature. After removing malicious packages from PyPI, they were quickly introduced new ones and updated the repository. Observing the stars and forks statistics captured by archive.org, the repository doubled its popularity in just a few days between February 27 and March 7 [8] [9]. It appears the author promoted the tool aggressively and later tried to extract data from its users \u2014 the 'double agent' feature was introduced on April 11. This cat-and-mouse game finished when GitHub removed the repository on April 16.\n \nComparison of the repository statistics on February 27 [8] and March 7 [9]\nUser agent control\nIt wasn\u2019t just one 'agent' found recently. I came across another Python package that offered a unique functionality \u2014 controlling your server via the User-Agent header!\n\nA sample from the user-agents-parser package\nThis innovative feature was embedded within a clone of a popular package designed to parse user-agent strings [10], which are self-descriptions browsers send to servers with every request [11]. Web applications often use these strings for different purposes, like directing users to a mobile site or gathering statistics. In this instance, the author replicated an existing package but added a twist: the strings could execute as shell commands before being parsed. Despite the modification, the packages maintained their original functionality, meaning you wouldn't know you were using a compromised package unless a specific request triggered the command execution.\nMoreover, the package creator employed another common tactic worth noting: they preserved the original project's website and author information, which are typically displayed on package index pages like PyPI. These stats can mislead users into trusting a seemingly popular and secure package.\nPyPI recently took steps to prevent such deception by clearly indicating which data are verified and which are not \u2014 a significant improvement.\n \nLeft \u2013 a screen from a repository captured in archive.org [12], right \u2013 another repository, state as of today [10].\nAfter I reported the package, Mike Fiedler from PyPI security team found that its earlier version was also trying to establish a persistent reverse shell by registering a cron job.\n\nAn earlier version of user-agents-parser was trying to use crontab for persistence\nFinal thoughts\nAll associated packages were removed from the PyPI, and the Oak-Grabber-V2 repository was shut down by GitHub. However, this isn't the first or last time we'll encounter such threats. If you're looking for advice, I've noted some tips in my last post. But most importantly, avoid downloading random software, even if it's for educational purposes.\nIoCs\n\nMalicious packages used by Oak-Grabber-V2: argsreq, colarg, colargs, reqarg, reqargs \nURLs with the actual grabber:\n\nhxxps:\/\/api.dreamyoak[.]xyz\/cdn\/file\nhxxps:\/\/api2.dreamyoak[.]xyz\/cdn\/file\n\n\nMalicious packages pretending to be user agent parser: user-agents-parser, user-agents-parsers\nIP used in an attempt for reverse shell: 95.179[.]177[.]74\n\nReferences\n[1] https: \/\/web.archive.org\/web\/20230731214919\/https:\/\/github.com\/dreamyoak\/[2] https:\/\/github.com\/web-flow.gpg[3] https:\/\/twitter.com\/MalGamy12\/status\/1698367753919357255[4] https:\/\/github.com\/anyrun\/YARA\/blob\/73fba11a040629e147281aa0528439d72fb5402a\/NagogyGrabber.yar[5] https:\/\/peps.python.org\/pep-3131\/[6] https:\/\/unicodeplus.com\/U+1D66A [7] https:\/\/unicodeplus.com\/U+1D5EE[8] https: \/\/web.archive.org\/web\/20240227221457\/https:\/\/github.com\/c\/Oak-Grabber-V2?tab=readme-ov-file[9] https: \/\/web.archive.org\/web\/20240307140321\/https:\/\/github.com\/dreamyoak\/Oak-Grabber-V2[10] The original, safe package is here: https:\/\/pypi.org\/project\/user-agents\/[11] https:\/\/developer.mozilla.org\/en-US\/docs\/Glossary\/User_agent[12] https:\/\/web.archive.org\/web\/20240117161520\/https:\/\/pypi.org\/project\/adafruit-circuitpython-htu31d\/","1":"Last week I was invited to provide input to a tabletop exercise for city-level crisis managers on cyber security risks and the role of CSIRTs. The organizers brought a color-coded threat-level sheet (based on the CISA Alert Levels) to the discussion and asked whether we also do color-coded alerts in Austria and what I think of these systems.\nMy answer was negative on both questions, and I think it might be useful if I explain my rationale here. The first was rather obvious and easy to explain, the second one needed a bit of thinking to be sure why my initial reaction to the document was so negative.\nEscalation Ratchet\nThe first problem with color-coded threat levels is their tendency to be a one-way escalation ratchet: easy to escalate, but hard to de-escalate. I\u2019ve been hit by that mechanism before during a real-world incident and that led me to be wary of that effect. Basically, the person who raises the alert takes very little risk: if something bad happens, they did the right thing, and if the danger doesn\u2019t materialize, then \u201cbetter safe than sorry\u201d is proclaimed, and everyone is happy, nevertheless. In other words, raising the threat level is a safe decision.\nOn the other hand, lowering the threat level is an inherently risky decision: If nothing bad happens afterwards, there might be some \u201cthank you\u201d notes, but if the threat materializes, then the blame falls squarely on the shoulders of the person who gave the signal that the danger was over. Thus, in a CYA-dominated environment like public service, it is not a good career move to greenlight a de-escalation.\nWe\u2019ve seen this process play out in the non-cyber world over the last years, examples include\n\nTerror threat level after 9\/11\nBorder controls in the Schengen zone after the migration wave of 2015\nComing down from the pandemic emergency\n\nThat\u2019s why I\u2019ve always been pushing for clear de-escalation rules to be in place whenever we do raise the alarm level.\nCost of escalation\nFor threat levels to make sense, any level above \u201cgreen\u201d need to include a clear guidance what the recipient of the warning should be doing at this threat level. In the example I saw, there was a lot of \u201cIdentify and patch vulnerable systems\u201d. Well, D'oh! This is what you should be doing at level green, too.\nThus, relevant guidance at higher level needs to be more than \u201cprotect your systems and prepare for attacks\u201d. That\u2019s a standing order for anyone doing IT operation, this is useless advice. What people need to know is what costs they should be paying in exchange for a better preparation against the current threat.\nThis could be a simple thing like \u201cWe expect a patch for a relevant system to be released out of our office-hours tonight, we need to have a team on standby to react as quickly as possible, and we\u2019ve willing to pay for the overtime work to have the patch deployed ASAP\u201d. Or the advice could be \u201cYou need to patch this outside your regular patching cadence, plan for a business disruption and\/or night shifts for the IT people\u201d. At the extreme end, it might even be \u201cwe\u2019re taking service X out of production, the changes to the risk equation mean that its benefits can\u2019t justify the increased risks anymore\u201d.\nTo summarize: if there were no hard costs to a preventative security measure, then you should have implemented them a long time ago, regardless of any threat level board.\nCounterpoint\nThere is definitely value in categorizing a specific incident or vulnerability in some sort of threat level scheme: A particularly bad patch day, or some out-of-band patch release by an important vendor certainly is a good reason that the response to the threat should also be more than business as usual.\nBut a generic threat level increase without concrete vulnerabilities listed or TTPs to guard against? That\u2019s just a fancy way of saying \u201cbe afraid\u201d and there is little benefit in that.\nPostscript: Just after posting this article, I stumbled on a fediverse post making almost the same argument, just with April 1st vs. the everyday flood of misinformation.","2":"When I wrap up at CERT.at, where I mostly work on our notification system (if you\u2019re a network operator in Austria and got a misassigned notification about some security issues \u2013 I might have been involved in that), I sometimes change my hat and explore other \u201ccyber\u201d-security areas, especially looking for malicious packages in PyPI, a standard Python package repository. The short summary is: there are a lot of them \u2013 but also, don\u2019t panic.\nIt\u2019s happening now\nLet\u2019s start with a rough analysis of a recent campaign that could be named \u201cfuncaptcha.\u201d According to records I was able to access, it started the day before yesterday (26th March) with a package called \u201cschubismomv3\u201d, but a post on Twitter [0] suggests there might have already been more by the time this gained my attention.\nAs per my findings, the first version of the package was published around 18:00 on March 26th (all timestamps are UTC+1), starting without any active malicious content, but included hate speech and used the name of a well-known security researcher [0].\n\nA sample from first version of \u201cschubismomv3\u201d package\nOver multiple iterations with an apparently \u201ctrial and error\u201d approach (Have you heard about testing your software locally? Or a test environment? No? Sorry, I might be biased. I\u2019m primarily a developer.) we ended up with version 1.10.0 published around 20:30. It used classic methods:\n\nthe setup.py script was configured with a custom installation command overriding the default\nduring the installation on Windows OS, a sub process was started with an encrypted script inside\nthe malicious script used the \u201cFernet\u201d encryption library to avoid automated de-obfuscation.\n\n\nFinal version of \u201cschubismomv3\u201d \u2013 overriding the installation command\nThe obfuscated code performed a  number of tasks typical for information stealers, such as exfiltrating cookies and passwords from web browsers, but also looked for browser extensions and applications related to cryptocurrencies, documents with names indicating that they contained secret information (Do you name your top-secret documents something like \u201cseecret\u201d?) and so on. All this information is then compressed and sent out to \u201cfuncaptcha[.]ru\/delivery\u201d (thus the name for the campaign). Afterwards, an interesting thing would happen: if the script detected an installation of Atomic Wallet [1], a cryptocurrency wallet app, it downloaded its own version, trying to replace the original. Finally, the next Python script was downloaded and put in the Windows start up directory.\n\nA sample from de-obfuscated code attempting to replace the original app\nI'll leave the deep analysis of these artifacts to others. Let's take a look at why this is a campaign, and not just a single malicious package, instead. As soon as \u201cschubismomv3\u201d was reported and removed (shortly after 21:00, according to the information I was able to gather), PyPI was flooded with similar packages, all displaying the same malicious activity.\nInitially, the threat actor used not exactly marketing friendly names, such as \u201cinsanepackagev1434\u201d or \u201cinsanepackage217234234242423442983\u201d. But later on they began to attempt to \u201ctypo-squat\u201d popular packages, by creating and uploading packages which closely \u2013 but not exactly \u2013 mirrored the names of popular ones.\nA few examples were \u201creqzests\u201d, \u201crequetsa\u201d, \u201cpy-cordd\u201d, \u201cpy-coqrd\u201d, \u201ccoloramza\u201d, \u201ccorlorama\u201d, \u201ccapmonstercloudclouidclient\u201d, \u201cpiolow\u201d, \u201cbop-utils\u201d, and many hundreds (!) more.\nThe campaign continued until the early hours of March 28th, when PyPI administrators took the decision to temporarily suspend registration of new users and projects [14]. By then, more than 500 packages had been created.\nThey are not alone\u2026\nLooking at the few months I spent looking at PyPI, I can confidently say that the \u201cfuncaptcha\u201d campaign might have been an exception in terms of the number of malicious packages involed \u2013 but it was not the only one.\nI observed a number of potentially malicious packages, with another recent case, \u201cyocolor\u201d, initially looking like a small thing on PyPI, but turning out to be a significantly bigger campaign targeting repositories on Github [2] [3].\nA further number of suspicious packages didn't do anything harmful, but weren't what you wanted to get either \u2013 some were pentesting packages (they usually get removed very quickly), some were advertisements, some may be part of research efforts.\n\nExample command extracted from a package that is not harmful on its own, but you probably didn't want to share all of it\n...but it\u2019s also no reason to panic\nEverything I have written about is disturbing, but comparatively simple to catch. The methods are so popular (and obvious) that it's somewhat confusing to me. The threat actors must be aware that the chances of successfully compromising an actual, real world systems are slim to negligible. The reasonably expectable return on investment is far outweighed by the effort the attackers have put into these campaigns.\nThe \"funcaptcha\" campaign is a good example - yes, their code contains functionality to exfiltrate data, as well as some more advanced techniques. But the initial infection vector \u2013 assuming that there aren't any further, undiscovered ones \u2013 exposes packages to quick detection and swift removal.\nOverriding the default install command is one of the first things that is being checked when a package is examined, and an external connection during installation is a pretty suspicious activity (although often a legitimate behavior).\nThe attackers seemed to know all of this and didn't attempt to hide it \u2013 which is odd, unless the campaign was just a smokescreen. The first step was slightly modified in later packages, downloading the first malicious script from their domain instead of embedding it, and recording the name of the package.\n\nExample description of packages released in later stages of the \u201cfuncaptcha\u201d campaign \u2013 it was what you would see in PyPI. I hope you wouldn't try to install such a package.\nPyPI Security Team\nThe big role in securing your development environment against such attacks is played by PyPI. After a few attempts, the index decided against proactively hunting for malware years ago, instead investing in improving the handling of abuse reports.\nAnd they do it well. The team responds very quickly, sometimes taking down malicious packages in a matter of minutes. Last year, PyPI reached an important milestone by hiring its first official Safety & Security Engineer [4].\nThey are active and transparent about their work, conducting a security audit of the registry [5], explaining the abuse reporting process [6], and most recently improving the reporting channel, as well as launching a private beta of the reporting API [7].\nThis means that the PyPI, while under constant attack from threat actors, is leveraging the power of many researchers hunting for malicious packages. And it seems to work well, at least against threat actors using known methods.\nWhat does all of this mean for me?\nMy personal opinion is that most of the cases we see in the security media and researchers' blog posts about malicious packages aren't the real threats we should be spending sleepless nights thinking about \u2013 we can leave that restlessness to advanced threats like backdoors in popular libraries, well hidden malicious actions which are only triggered under very specific conditions, and so on.\nThe typical threats relying on obvious methods are more like the flu: we cannot ignore them, but we should get used to them and, most importantly, take basic precautions.\nThese always depend on what you're trying to secure \u2013 don't forget to think about your threat modeling, even if it's basic!\nThere are a few tips, useful not only for Python environments:\n\nDo. Not. Download. Random. Stuff. Really, that\u2019s the most important thing. Malicious code is often hidden in low-quality packages, repositories in Github, and so on. Please pay attention to what you run on your computer.\nUse reputable dependencies. But be careful: the information in package registries, such as connected repositories or maintenance names, is often just a declaration. Instead, use external reputation services. There are a few free ones you can check (for example [8] [9]), as well as services that offer only verified dependencies for download.\nKeep your dependencies healthy. Scan them regularly for known vulnerabilities (including container images), and install security updates (not necessarily fully automated \u2013 that would open the door to other threats). You can use free or paid services, and your source hosting service probably already has something ready for painless integration. For example, you can check out osv.dev [10].\nInstall only what you need. You can think of your project's dependencies as an ingredient list: if the food item or beverage you're about to buy has a long list of ingredients you don't understand, you should probably think twice before eating it. Dependencies that you don't need, dependencies that have been used but are no longer used \u2013 all of those unnecessarily increase the risk of an incident.\nThink about reducing the data that your development environment has access to. Thread actors use malicious packages and repositories to target data on developer machines. Solutions such as development containers [11] can reduce the potential scope of a breach.\nMonitor test environments\u00a0the same way\u00a0as you would production. Advanced threats may not be easy to detect locally, but there is a chance that they will reveal their intentions in your test environments before they reach production. Monitoring outgoing connections can be helpful in catching them. Also: you probably also want to secure your test environments as production if they are accessed externally [12], and not leave your production data there, especially of former customers [13].\n\nStay safe\nI started by explaining a case from the PyPI world, but that was just an example. Developing software means relying on external dependencies, and it's great that we share common parts, especially when implementing complex solutions (Don't implement your own cryptography. Just don't.). Like everything, it brings its own risks, and we just have to be aware of them. And take precautions. And do not download random stuff.\nIoCs\nYou can look for signs of \u201cfuncaptcha\u201d by:\n\nfuncaptcha[.]ru\n0c1ddd33e630f4ac684880f0e673dfa84919272494c11da0f1ec05fb4f919ce8 \u2013 first of modified apps the script tried to inject\nabe19b0964daf24cd82c6db59212fd7a61c4c8335dd4a32b8e55c7c05c17220d \u2013 second modified app\n\nReferences\n[0] https:\/\/x.com\/_JohnHammond\/status\/1772704618574705057?s=20\n[1] https:\/\/atomicwallet.io\/\n[2] https:\/\/www.bleepingcomputer.com\/news\/security\/hackers-poison-source-code-from-largest-discord-bot-platform\/\n[3] https:\/\/medium.com\/@demonia\/discovering-malwares-in-public-github-repositories-3e080f030ecc\n[4] https:\/\/blog.pypi.org\/posts\/2023-08-04-pypi-hires-safety-engineer\/\n[5] https:\/\/blog.pypi.org\/posts\/2023-11-14-1-pypi-completes-first-security-audit\/\n[6] https:\/\/blog.pypi.org\/posts\/2023-09-18-inbound-malware-reporting\/\n[7] https:\/\/blog.pypi.org\/posts\/2024-03-06-malware-reporting-evolved\/\n[8] https:\/\/deps.dev\/\n[9] https:\/\/securityscorecards.dev\/\n[10]\u00a0 https:\/\/osv.dev\/\n[11] https:\/\/containers.dev\/\n[12] https:\/\/www.theverge.com\/2024\/1\/26\/24051708\/microsoft-hack-russian-security-attack-senior-leadership-emails\n[13] https:\/\/niebezpiecznik.pl\/post\/dcg-centrum-medyczne-pokazuje-jak-nie-informowac-o-kradziezy-danych-pacjentow\/\u00a0 (Polish \u2013 data of a medical clinic stolen from the test environment of a vendor they have not worked with for a few years)\n[14] https:\/\/status.python.org\/incidents\/dc9zsqzrs0bv\u00a0","3":"This is some dummy content","4":"The EU has been pushing the concept of the \"European Cyber Shield\" within the Digital Europe Programme as well as with the proposed \"Cyber Solidarity Act\".\nAfter a presentation on this topic at the CSIRTs Network meeting in June, I've written a long-form paper to lay out my thinking on this topic.\nExecutive Summary\n\nThe proposed Cyber Shield (Chapter 2 Cyber Solidarity Act) contains valid ideas: supporting SOCs by fostering national and cross-border collaboration is worth doing.\nAn unfortunate choice of terminology is prone to confuse readers of the Act. A change would be welcomed.\nThe relationship between the proposed structures and the tasks of the CSIRTs and the CSIRTs network (as stipulated in the NIS2 Directive) is not entirely clear. Defining this relationship and integrating the proposed roles with the existing structures would be useful.\nEU funding for multiple consortia with the aim of building closer, technical collaborations in cross-border structures is a sound investment.\n\nThe full paper is available here or from our Download\/Papers page.","5":"We at CERT.at process and share a wide selection of cyber threat intelligence (CTI) as part of our core mission as Austria\u2019s hub for IT security information. Right now, we are involved in two projects that involve the purchase of commercial CTI. I encountered some varying views on what CTI is and what one should do with the indicators of compromise (IoCs) that are part of a CTI feed.\nThis blog post describes my view on this topic.\nContext\nThe EU decided in March 2022 to create a cybersecurity emergency response fund with which ENISA can purchase support services for the NIS entities in the member states.\nAustria is also taking part in a project that stems from the DEP call DIGITAL-ECCC-2022-CYBER-03 in combination with a joint procurement with the ECCC.\nLayers of CTI\nOne way to structure and classify CTI feeds is to look at the abstraction level at which they operate. As Wikipedia puts it: \n\nTactical: Typically used to help identify threat actors (TAs). Indicators of compromise (such as IP addresses, Internet domains or hashes) are used and the analysis of tactics, techniques and procedures (TTP) used by cybercriminals is beginning to be deepened. Insights generated at the tactical level will help security teams predict upcoming attacks and identify them at the earliest possible stages.\nOperational: This is the most technical level of threat intelligence. It shares hard and specific details about attacks, motivation, threat actor capabilities, and individual campaigns. Insights provided by threat intelligence experts at this level include the nature, intent, and timing of emerging threats. This type of information is more difficult to obtain and is most often collected through deep, obscure web forums that internal teams cannot access. Security and attack response teams are the ones that use this type of operational intelligence.\nStrategic: Usually tailored to non-technical audiences, intelligence on general risks associated with cyberthreats. The goal is to deliver, in the form of white papers and reports, a detailed analysis of current and projected future risks to the business, as well as the potential consequences of threats to help leaders prioritize their responses.\n\nWith tactical CTI, there a reasonable chance that it can shared on a machine-to-machine basis with full semantic information that makes it possible to automate the processing for detection and prevention purposes. Many commercial security devices are sold with a subscription to the vendor\u2019s own data-feeds. This ranges from simple anti-spam solutions, over filters for web proxies to rules for SIEMs.\nWhile it is possible to encode operational CTI in standardized data exchange formats like STIX2, it is much harder for automated systems to operationalize this information. For example, what automated technical reaction is possible to \u201cthreat actor X is now using compromised CPEs in the country of its targets for C2 communication\u201d? Yes, one can store that kind of information in OpenCTI (or a similar Threat Intelligence Platform (TIP)) and map it to the ATT&CK framework. That can be valuable for the human expert to plan defenses or to react better during incidents, but it is not detailed enough for automated defense.\nWith strategic CTI, we are on the human management layer. This is never designed for automated processing by machines.\nTypes of IOCs\nFocusing on the technical layer, we find that there are a number of different types of information encoded in the data feeds. One way to look at this is the Diamond Model of intrusion analysis which is built around information on adversary, capability, infrastructure, and victim. While this is a very valuable model for intrusion analysis, it is too complex for a simple categorization of CTI feeds.\nI propose the following three basic types:\nType 1: Attack Surface Information\nMany of the feeds from Shadowserver fall in this category. Shodan data can also be a good example. There is now a bunch of companies focusing on \u201ccyber risk rating\u201d, which all try to evaluate the internet-visible infrastructure of organizations.\nExamples:\n\n\u201cOn IP-address A.B.C.D, at time X, we detected a Microsoft Exchange server running a version that is vulnerable to CVE-202X-XXXX\u201d.\n\"The time-server at IP addres Y can be abused as ddos-reflector.\"\n\"On IP address Z, there is an unprotected MongoDB reachable from the Internet.\"\n\nNotable points are:\n\nThis is very specific information about a concrete system. Usually, it is very clear who is responsible for it.\nThere is no information about an actual compromise of the listed system. The system might be untouched or there may already be a number of webshells deployed on it.\nThere is no information about an attacker.\nThis is sensitive (potentially even GDPR-relevant) information.\nThis information is (almost) useless to anybody but the owners of the system. Well, except for threat actors - that is another reason why we consider this to be sensitive information.\nThus, the coordinating CSIRT should pass this information on to the maintainers of this system and to nobody else. CERT.at is usually tagging these events with \u201cvulnerable \/ vulnerable system\u201d or \u201cvulnerable \/ potentially unwanted accessible service\u201d.\n\nExpected response from system owner: \n\nMitigate the threat by reconfiguring \/ patching \/ upgrading \/ removing the system or maybe even accept the risk (e.g. \u201cyes, we really want to have telnet enabled on that server\u201d).\nVerify that the system has not been breached yet.\n\nType 2: Threat Actor IOCs\nThis is the opposite: the information is solely about the threat actor and the resources this group is using, but there is no clear information on the targets. Typical information contained in these IOCs is:\n\nThe domain-name of a command & control (C2) server of the TA\nAn IP address of a C2 server\nFilename and\/or hash of malware used by the TA\nEmail subject, sender and sending IP address of a phishing mail\nMutex names, registry-keys or similar artefacts of an infection\nURL-pattern of C2 connections\n\nExample:\n\nA RAT Remcos campaign was detected 2023-06-14 to use\n\nMutex: Rmc-MQTCB0\nURI: \/json.gp\nEmail-attachment: Shipment_order83736383_document_file9387339.7z\nMD5: 2832aa7272b0e578cd4eda5b9a1f1b12\nFilename: Shipment_order837363.exe\n\n\n\nNotable points are:\n\nThis is detailed information about a threat actor infrastructure, tools and procedures.\nThere is often no information about targets of these attacks. Sometimes, some targeting information is known, like \u201cThis TA usually attacks high-tech companies\u201d.\nThis information is potentially useful for everybody who that actor might target.\nUnless one thinks that attacker IP-addresses deserve GDPR-protection, this data has no privacy implication.\nThus, the coordinating CSIRT should pass this information on to all constituents who are capable of operationalizing such CTI. CERT.at is usually not sending this kind of information pro-actively to all constituents, instead we operate a MISP instance which holds these IOCs. Security automation on the side of the constituent is welcome to use the MISP APIs to fetch and process the IOCs.\nIf the targeting of the TA is sufficiently well known and specific, CERT.at will pass on the IOCs directly to the constituent\u2019s security team.\nIn rare cases, the TA is abusing infrastructure of one of our constituents. In that case, we have a mix with the next type of CTI.\n\nExpected response from system owner:\n\nAdd the IOCs to any sort of incident prevention system, e.g., filter lists in proxies, EDR or AV software.\nAdd the IOCs to the incident detection system, e.g., create suitable rules in SIEMs.\nIdeally, also perform a search in old logs for the newly acquired IOCs.\n\nType 3: Infection data\nSometimes we receive cyber threat information that is very specific and concerns a live incident inside a constituent\u2019s network.\nExamples are:\n\n\u201cWe detected at timestamp X a webshell placed on a Citrix server. IP-address = A.B.C.D, path = \/logon\/LogonPoint\/uiareas\/mac\/vkb.php\u201d\n\u201cOur darknet monitoring detected that someone is selling VPN credentials for user@example.com on the platform X\u201d\n\u201cAfter a takedown of botnet X we are monitoring botnet drone connections to the former C2 servers. On [timestamp], the IP address A.B.C.D connected to our sinkhole.\u201d\n\u201cWe managed to get access to the infrastructure of threat actor X. According to the data we found there, your constituent Y is compromised.\u201d\n\u201cPlease find below information on IPs geolocated in your country which are most likely hosting a system infected by SystemBC malware. [\u2026] Timestamp, IP-address, hostname, c2 ip-address\u201d\n\u201cThere are signs of malicious manipulations on the Website of domain X, there is a phishing page at \/images\/ino\/95788910935578\/login.php\u201d\n\nNotable points are:\n\nThis is usually very specific information about a live incident involving a concrete system.\nIn the best case, the information is good enough to trigger a successful investigation and remediation.\nThe threat actor is often, but not always, named.\nThis is sensitive (potentially even GDPR-relevant) information.\nThis information is (almost) useless to anybody but the owners of the system.\nThis information can be very time-sensitive: a quick reaction can sometimes prevent a ransomware incident.\nThus, the coordinating CSIRT should pass this information quickly on to the maintainers of this system and to nobody else. CERT.at is usually tagging these events with \u201cintrusions \/ system-compromise\u201d or \u201cfraud \/ phishing\u201d\n\nExpected response from system owner:\n\nStart the local incident response process.\nClean up the known infection and investigate the possibility of additional compromises in the affected network (lateral movement?).\nInvestigate how the system got comprimised and reconfigure \/ patch \/ upgrade \/ remove the system so that a re-infection via the same vulnerability is no longer possible.\n\nTooling\nCERT.at is using IntelMQ to process feeds of type 1 and 3. CTI feeds of type 2 are handled by our MISP installation."},"tokens":{"0":2018,"1":915,"2":2818,"3":7,"4":223,"5":2295},"language":{"0":"en","1":"en","2":"en","3":"en","4":"en","5":"en"}}